From 8125e9e5ae413baa4a8ebd2f4d134b28d92b1fd4 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Thu, 5 Apr 2012 11:34:56 +0200
Subject: [spice-xpi 14/14] Add support for "new" USB redirection

6.3 will have a 100% free USB redirection solution. This commit makes
spice-xpi handle it. "old" USB redirection is still supported. When
UsbListenPort is set to 0, the new USB redirection solution will be
used, and the USB filter/USB autoredirection settings will be sent
to the client using controller messages. When it's set to a value
different from 0, the new USB redirection system will be disabled,
and the USB helper will be spawned.
---
 SpiceXPI/src/plugin/controller_prot.h |    4 ++++
 SpiceXPI/src/plugin/plugin.cpp        |   17 ++++++++++++++++-
 SpiceXPI/src/plugin/plugin.h          |    1 +
 3 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/SpiceXPI/src/plugin/controller_prot.h b/SpiceXPI/src/plugin/controller_prot.h
index af61b91..9ef59a8 100644
--- a/SpiceXPI/src/plugin/controller_prot.h
+++ b/SpiceXPI/src/plugin/controller_prot.h
@@ -103,6 +103,10 @@ enum {
     CONTROLLER_COLOR_DEPTH,
     CONTROLLER_DISABLE_EFFECTS,
 
+    CONTROLLER_ENABLE_USB,
+    CONTROLLER_ENABLE_USB_AUTOSHARE,
+    CONTROLLER_USB_FILTER,
+
     //spice client -> extrenal app
     CONTROLLER_MENU_ITEM_CLICK = 1001,
 };
diff --git a/SpiceXPI/src/plugin/plugin.cpp b/SpiceXPI/src/plugin/plugin.cpp
index 9d2eb70..1426dca 100644
--- a/SpiceXPI/src/plugin/plugin.cpp
+++ b/SpiceXPI/src/plugin/plugin.cpp
@@ -586,6 +586,12 @@ void nsPluginInstance::SendMsg(uint32_t id)
     WriteToPipe(&msg, sizeof(msg));
 }
 
+void nsPluginInstance::SendBool(uint32_t id, PRBool value)
+{
+    ControllerValue msg = { {id, sizeof(msg)}, !!value };
+    WriteToPipe(&msg, sizeof(msg));
+}
+
 void nsPluginInstance::SendValue(uint32_t id, uint32_t value)
 {
     if (!value)
@@ -771,7 +777,16 @@ void nsPluginInstance::Connect()
         pthread_t controller_thread_id;
         pthread_create(&controller_thread_id, NULL, ControllerWaitHelper,
             reinterpret_cast<void *>(this));
-        ExecuteUsbRdrCtrl();
+
+        if (m_usb_port != 0) {
+            /* old USB, disable new USB solution */
+            SendBool(CONTROLLER_ENABLE_USB, PR_FALSE);
+            ExecuteUsbRdrCtrl();
+        } else {
+            SendBool(CONTROLLER_ENABLE_USB, PR_TRUE);
+            SendBool(CONTROLLER_ENABLE_USB_AUTOSHARE, m_usb_auto_share == PR_TRUE ? 1 : 0);
+            SendStr(CONTROLLER_USB_FILTER, m_usb_filter.c_str());
+        }
     }
 }
 
diff --git a/SpiceXPI/src/plugin/plugin.h b/SpiceXPI/src/plugin/plugin.h
index 20b60c6..2c19930 100644
--- a/SpiceXPI/src/plugin/plugin.h
+++ b/SpiceXPI/src/plugin/plugin.h
@@ -172,6 +172,7 @@ private:
     void WriteToPipe(const void *data, uint32_t size);
     void SendInit();
     void SendMsg(uint32_t id);
+    void SendBool(uint32_t id, PRBool value);
     void SendValue(uint32_t id, uint32_t value);
     void SendStr(uint32_t id, const char *str);
     void SendWStr(uint32_t id, const wchar_t *str);
-- 
1.7.9.3

